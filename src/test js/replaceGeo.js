
//
// let newPol = pol.split('(');
// newPol = newPol[2].split(')')[0].split(',');
//
// let endPol = newPol.map(p => {
//     return  p.split(' ').join(',')
// })
//
// console.log(endPol.length)
// console.log(endPol)

import WKT from 'terraformer-wkt-parser'



// import Terraformer from "terraformer";
// let WKT = require('terraformer-wkt-parser');

import proj4 from 'proj4';

const def_msk = '+proj=tmerc +lat_0=55.6666666667 +lon_0=37.5 +x_0=0 +y_0=0 +k_0=1. +a=6377397 +rf=299.15 +towgs84=396,165,557.7,-0.05,0.04,0.01,0 +no_defs';


//"Проезд от ул. Константина Федина до 9-я Парковая ул., д. 62, стр. 4"
const polygon888 = 'POLYGON((19070.019190 15392.624556,19069.278736 15397.078310,19059.146212 15396.837071,19049.303343 15396.602729,19043.400851 15397.031010,19042.258576 15397.491651,19038.176621 15398.388579,19034.002659 15398.176748,19034.043547 15399.362085,19033.425267 15400.147074,19032.599357 15400.368718,19032.068744 15400.045487,19027.800441 15399.427061,19028.181885 15390.025494,19031.604584 15390.085252,19031.731152 15390.087462,19031.818896 15388.002433,19031.905824 15385.951475,19032.153921 15383.913724,19032.345521 15382.708100,19030.304837 15382.501573,19028.863981 15382.606727,19026.825862 15382.921773,19026.879000 15389.008000,19026.862734 15389.208717,19026.067263 15399.024606,19026.043000 15399.324000,19024.944131 15399.290106,19024.838107 15402.298950,19024.730357 15405.356774,19032.946130 15405.630370,19032.936086 15405.930202,19033.235918 15405.940246,19033.232007 15406.048187,19036.950410 15406.172750,19038.116821 15406.184144,19042.928837 15406.231150,19047.446440 15406.275280,19047.488822 15404.614530,19043.726750 15404.577520,19043.826272 15404.280267,19043.947978 15403.984214,19044.092296 15403.691706,19044.259335 15403.405215,19044.448853 15403.127285,19044.660234 15402.860476,19044.892482 15402.607289,19045.144227 15402.370102,19045.413743 15402.151096,19045.698990 15401.952193,19045.997664 15401.775002,19046.307254 15401.620771,19046.625117 15401.490366,19046.948550 15401.384250,19047.274859 15401.302494,19047.601432 15401.244791,19047.925796 15401.210488,19048.245669 15401.198628,19048.546641 15401.207630,19058.645310 15401.718250,19072.537340 15402.424104,19072.867340 15402.524868,19073.196682 15402.637184,19073.524456 15402.761011,19073.850077 15402.896372,19074.172955 15403.043253,19074.492494 15403.201601,19074.808097 15403.371319,19075.119169 15403.552275,19075.425120 15403.744292,19075.725370 15403.947152,19076.019349 15404.160599,19076.306505 15404.384337,19076.586303 15404.618031,19076.858234 15404.861309,19077.121811 15405.113767,19077.376578 15405.374966,19077.622107 15405.644438,19077.858007 15405.921689,19078.083919 15406.206201,19078.299525 15406.497433,19078.504542 15406.794829,19078.698730 15407.097818,19078.881886 15407.405817,19079.053851 15407.718239,19079.214504 15408.034490,19079.363766 15408.353978,19079.501597 15408.676113,19079.627996 15409.000312,19079.742820 15409.326165,19079.615678 15413.851859,19079.463037 15417.780234,19079.445702 15418.226367,19079.028722 15428.957776,19078.834472 15434.231226,19078.674610 15439.452565,19078.664940 15439.768390,19078.248904 15453.356737,19077.489394 15476.011389,19077.321420 15480.325026,19077.178338 15483.780967,19077.159644 15484.232489,19076.934375 15489.673561,19076.618899 15500.000000,19076.368886 15508.183638,19076.354611 15508.650922,19076.032682 15519.188593,19075.802765 15526.714416,19075.653801 15531.590457,19075.638813 15532.081049,19075.457365 15538.020361,19075.351000 15541.502000,19075.284128 15543.575036,19074.598069 15564.842863,19074.522794 15567.176388,19074.509548 15567.586997,19074.478369 15568.553563,19074.389056 15571.322278,19074.341000 15572.812000,19074.246659 15574.037200,19076.810364 15574.526026,19079.374070 15575.014852,19079.386275 15574.553351,19079.652645 15568.275064,19080.247103 15550.783851,19080.493386 15547.932895,19080.818342 15547.932895,19081.101983 15542.722814,19081.327356 15538.583027,19081.295457 15537.502175,19081.554666 15531.143599,19081.709737 15529.977429,19081.924332 15526.256975,19082.622038 15520.314971,19085.359309 15518.343263,19087.413931 15517.690611,19087.225753 15513.399099,19085.083361 15513.041480,19083.355408 15511.740476,19082.120003 15510.342503,19082.194857 15508.595602,19082.867451 15492.898910,19083.241129 15484.178177,19083.514534 15483.587246,19083.546226 15481.165003,19083.585748 15480.128027,19083.583157 15479.866964,19083.612569 15479.107418,19083.631916 15478.607792,19083.767347 15475.110413,19083.786694 15474.610788,19083.922125 15471.113409,19083.941472 15470.613783,19084.076903 15467.116404,19084.096250 15466.616779,19084.231680 15463.119400,19084.251028 15462.619775,19084.386458 15459.122396,19084.405805 15458.622770,19084.541236 15455.125391,19084.560583 15454.625766,19084.696014 15451.128387,19084.715361 15450.628762,19084.850792 15447.131383,19084.870139 15446.631757,19085.005569 15443.134378,19085.024917 15442.634753,19085.035513 15442.361125,19085.156112 15439.137475,19085.174804 15438.637825,19085.305651 15435.140272,19085.324343 15434.640621,19085.455189 15431.143068,19085.473882 15430.643417,19085.604728 15427.145864,19085.623420 15426.646213,19085.754267 15423.148660,19085.772959 15422.649010,19085.903805 15419.151456,19085.922498 15418.651806,19086.053344 15415.154253,19086.072037 15414.654602,19086.093071 15414.092357,19086.210314 15411.156829,19086.230268 15410.657227,19086.300012 15408.910985,19086.466890 15408.915284,19086.583722 15405.348500,19086.555296 15402.565189,19086.295432 15401.970480,19085.497145 15402.375077,19084.491163 15402.620704,19083.872884 15402.916229,19083.416095 15402.999345,19082.998212 15402.826708,19082.556224 15402.383612,19082.142624 15401.461690,19077.158293 15397.323460,19074.866146 15397.409841,19074.575712 15393.092257,19070.019190 15392.624556))\n'

const polygon = "MULTIPOLYGON(((15708.412114 5669.900847,15707.559678 5669.506161,15701.401080 5666.654670,15681.028474 5656.837651,15675.294143 5654.074429,15674.088239 5653.521479,15664.000882 5648.896066,15661.972027 5647.965764,15655.157500 5644.841060,15635.997600 5635.908230,15625.195166 5630.925399,15621.397090 5629.178694,15606.919600 5622.520610,15601.534000 5619.520000,15599.489000 5618.553000,15594.994000 5616.483000,15584.497025 5612.148180,15584.076000 5612.630000,15582.530227 5612.024562,15581.757155 5611.721770,15581.697690 5611.553550,15579.891080 5610.618260,15581.552740 5606.906453,15581.911020 5606.106130,15576.467860 5603.787930,15574.524788 5607.776818,15574.514670 5607.797590,15573.747320 5606.748580,15559.617450 5600.133900,15559.621617 5599.761192,15559.637162 5598.370902,15559.848993 5596.636136,15561.593290 5591.435580,15576.871900 5598.737770,15578.879350 5594.503960,15580.479000 5590.711000,15564.496000 5582.996000,15564.578902 5582.698730,15564.903526 5582.133847,15565.714245 5581.556488,15566.331000 5581.435000,15571.843431 5583.333918,15581.374000 5586.617000,15582.956258 5582.641817,15584.102237 5579.762717,15585.011354 5577.478698,15585.481000 5576.199000,15586.247000 5576.352000,15596.955223 5545.818853,15597.382287 5544.601081,15597.638000 5543.872000,15607.012000 5517.203000,15602.248000 5515.303000,15605.054000 5507.369000,15606.341000 5503.677000,15603.887185 5502.804722,15602.730809 5502.393656,15601.593752 5501.989457,15602.162898 5500.433276,15602.695500 5500.619490,15605.562982 5492.624222,15613.241706 5494.998382,15630.685000 5447.186000,15628.307000 5446.176000,15627.545000 5441.349000,15627.617995 5441.188916,15628.314873 5439.660606,15630.315868 5435.272262,15630.580000 5434.693000,15625.833000 5431.925000,15612.373000 5426.916000,15598.028000 5421.563000,15599.341000 5417.496000,15599.442969 5417.267741,15588.652769 5412.447479,15588.550800 5412.675738,15581.339582 5409.557647,15580.347658 5409.128744,15578.900249 5408.502892,15576.079000 5407.283000,15572.644173 5405.898044,15575.073370 5398.352773,15575.314809 5397.632228,15575.849000 5396.038000,15576.524818 5393.852457,15578.850000 5386.333000,15580.783915 5387.244440,15581.689000 5387.671000,15586.878772 5390.187912,15587.719160 5390.595479,15592.722068 5393.021766,15600.325000 5396.709000,15615.723000 5404.229000,15631.186134 5411.941874,15631.854000 5412.275000,15646.938000 5419.548000,15664.119000 5428.040000,15665.525907 5428.647695,15682.443610 5436.744080,15684.028680 5438.232410,15689.387850 5441.010460,15691.904119 5442.115480,15693.709895 5442.742850,15693.917764 5442.833639,15705.278920 5447.795730,15708.472060 5449.427350,15721.290859 5455.818817,15721.325220 5455.835950,15722.585572 5456.445468,15734.398670 5462.218440,15750.470270 5470.203040,15751.758000 5470.833410,15758.544510 5473.827850,15759.633573 5474.259705,15760.578667 5474.568134,15762.097053 5474.971088,15764.239310 5475.427220,15765.963300 5475.769960,15766.831423 5475.944861,15767.693817 5476.109226,15769.806810 5476.443703,15771.344480 5476.597320,15772.610967 5476.665069,15774.102135 5476.690958,15776.140650 5476.623050),(15778.296470 5476.466010,15783.068298 5476.071430,15785.704740 5475.797820,15786.650801 5475.648888,15787.596862 5475.499957,15789.465528 5475.068957,15791.484028 5474.478249,15793.654720 5473.734300,15809.605087 5467.955870,15810.020020 5467.805550,15818.296350 5464.466230,15817.554151 5464.870016,15817.393306 5465.022932,15817.249148 5465.193402,15817.124395 5465.378544,15817.021076 5465.574961,15816.940430 5465.778942,15816.882866 5465.986687,15816.847997 5466.194521,15816.834738 5466.399085,15816.841988 5466.603951,15816.870743 5466.812719,15816.922186 5467.022063,15816.996811 5467.228323,15817.094322 5467.427687,15817.213589 5467.616411,15817.352681 5467.791037,15817.508970 5467.948608,15817.679286 5468.086827,15818.047876 5468.299878,15818.239000 5468.374000,15818.727847 5468.422536,15819.218150 5468.488726,15819.708978 5468.572805,15820.199371 5468.674941,15820.688350 5468.795237,15821.174920 5468.933723,15821.658076 5469.090361,15822.136812 5469.265035,15822.610127 5469.457558,15823.077028 5469.667668,15823.536542 5469.895030,15823.987722 5470.139238,15824.429648 5470.399817,15824.861442 5470.676225,15825.282264 5470.967860,15825.691328 5471.274060),(15826.087896 5471.594112,15826.471292 5471.927253,15826.547023 5471.998029,15826.840898 5472.272680,15827.196163 5472.629554,15827.536599 5472.997006,15827.861788 5473.374143,15828.171382 5473.760058,15828.465100 5474.153830,15829.127123 5475.477965,15829.242335 5475.717601,15826.312076 5476.673330,15826.021283 5476.768175,15823.954914 5477.476083,15823.841680 5477.227760,15814.287740 5481.763240,15792.477830 5491.949570,15772.867510 5501.085420,15703.757962 5469.089259,15701.664642 5468.120099,15698.401809 5466.609481,15687.910820 5461.752390,15687.842720 5461.947632,15686.936050 5464.547071,15682.385307 5477.594118,15667.393390 5520.576170,15682.127974 5525.715517,15673.828955 5546.055453,15704.745860 5561.560110,15698.232000 5576.137000,15699.607493 5576.769432,15713.819402 5583.333960,15732.213000 5591.861000,15743.533342 5596.973415,15746.048117 5598.125738,15748.350669 5599.147556,15748.339090 5599.175510,15748.001841 5599.918366,15747.340698 5601.374661,15747.088086 5601.931087,15746.631280 5602.937290,15743.977445 5608.409854,15743.030755 5610.362056,15737.279450 5622.222020,15744.489287 5625.296107,15744.726920 5625.440720,15747.599209 5626.859465,15743.580206 5635.605072,15743.164064 5636.308774,15742.097604 5638.555434,15740.028260 5643.088386,15740.377696 5643.281008,15739.797000 5644.141000,15739.586000 5644.001000,15737.091580 5649.521260,15736.656511 5650.427346,15735.339097 5653.171023,15731.480925 5661.206145,15731.347538 5661.437708,15731.236110 5661.693717,15731.152151 5661.971169,15726.945792 5670.947519,15726.774836 5671.189745,15726.543045 5671.692055,15725.983204 5672.842477,15723.971850 5676.975630,15718.248274 5674.618279,15715.980000 5673.519000,15708.412114 5669.900847),(15847.270260 5712.969150,15854.598250 5707.917840,15852.434474 5704.602753,15849.878807 5700.687255,15848.270336 5698.222943,15847.225881 5696.622750,15846.717430 5695.843760,15846.101707 5696.235525,15845.604723 5695.457284,15843.991886 5692.931699,15838.685496 5684.622281,15833.013590 5675.740490,15832.863425 5675.480778,15831.801590 5673.644320,15832.494156 5673.243880,15838.553000 5669.337000,15845.517710 5664.888028,15850.366000 5661.791000,15860.617000 5655.186000,15864.000000 5655.198000,15871.826799 5650.247531,15880.123090 5644.918210,15882.034240 5645.382750,15885.944710 5650.868530,15890.752560 5647.844110,15887.997530 5643.532920,15891.582722 5640.569836,15893.542273 5638.950309,15886.993620 5629.953115,15883.944726 5625.764242,15878.111677 5617.750217,15877.175511 5616.464018,15876.247163 5615.188562,15875.328979 5613.927069,15861.606860 5595.074254,15856.372727 5603.507763,15850.126881 5599.168346,15849.726600 5598.887020,15849.455300 5598.757747,15844.711616 5596.497410,15843.432250 5595.887800,15842.222740 5595.218280,15838.621560 5593.575430,15836.655794 5592.628059,15827.087493 5588.016763,15825.532522 5587.289438,15818.194905 5583.857327,15817.679795 5583.612275,15813.832090 5581.781810,15812.323184 5581.063980,15811.726562 5580.780149,15811.634350 5580.736281,15806.625430 5578.349130,15806.426225 5578.253672,15805.533988 5577.826117,15800.659960 5575.490510,15799.394818 5574.879363,15790.115966 5570.397070,15787.817397 5569.286710,15782.904000 5566.936000,15782.603838 5567.586082,15781.345285 5567.005053,15781.667000 5566.302000,15780.152000 5565.588000,15779.776664 5565.411109,15777.390078 5570.528315,15777.183988 5570.970203,15770.295000 5585.660000,15761.048000 5604.971000,15753.099486 5601.297029,15749.751852 5599.790869,15748.350669 5599.147556,15748.339090 5599.175510,15748.001841 5599.918366,15747.340698 5601.374661,15747.088086 5601.931087,15746.631280 5602.937290,15743.977445 5608.409854,15743.030755 5610.362056,15737.279450 5622.222020,15744.489287 5625.296107,15744.726920 5625.440720,15747.599209 5626.859465,15743.580206 5635.605072,15743.164064 5636.308774,15742.097604 5638.555434,15740.028260 5643.088386,15740.377696 5643.281008,15739.797000 5644.141000,15739.586000 5644.001000,15737.091580 5649.521260,15736.656511 5650.427346,15735.339097 5653.171023,15731.480925 5661.206145,15731.347538 5661.437708,15731.236110 5661.693717,15731.152151 5661.971169,15726.945792 5670.947519,15726.774836 5671.189745,15726.543045 5671.692055,15725.983204 5672.842477,15723.971850 5676.975630,15730.230854 5680.080400,15745.595783 5687.702151,15748.265997 5688.997585,15750.000000 5689.838823,15751.699000 5690.663250,15751.711122 5690.668731,15767.318000 5697.725000,15768.348185 5698.204433,15775.309830 5701.244270,15779.909210 5703.407150,15785.866310 5705.905280,15790.328940 5708.256390,15803.715999 5714.644984,15807.101630 5716.260680,15808.547958 5716.943575,15812.499268 5718.809217,15817.498844 5721.169805,15820.222986 5722.456030,15824.742214 5724.589819,15825.101953 5724.669473,15825.484621 5724.741312,15825.868806 5724.800668,15826.253901 5724.847515,15826.639298 5724.881868,15827.024398 5724.903781,15827.408608 5724.913344,15827.791348 5724.910686,15828.172051 5724.895969,15828.550165 5724.869391,15828.925160 5724.831180,15842.869215 5715.743035,15845.888750 5713.775030,15847.270260 5712.969150)))\n"

// let newPol3 = pol3.split('(');
// newPol3 = newPol3[3].split(')')[0].split(',');
//
// let endPol3 = newPol3.map(p => {
//     return  p.split(' ').join(',')
// })
//
// console.log(endPol3.length)
// console.log(endPol3)

console.log(polygon.length);
let newPol = ''

for (let i of polygon ) {
    if( i === '('){
        newPol += '['
    }else if( i === ')'){
        newPol += ']'
    }else {
        newPol += i
    }
}
newPol = newPol.slice(12,-1)

let newPo = ''
let newPoArr = []
let startPoArr = []
let endPoArr = []
let resPoArr = []
let c = 0

const fff = (poly) => {
    let newP = ''
    let idx = 0

    if(!poly) return 0

    let s = 0
    let e = 0

    for (let i of poly ) {
        if( i === '['){
            startPoArr.push({start: c})
            // console.log(' start: c', c)
            s = c
            // e = 0
            // console.log('poly[idx+1,poly.length',poly.substr(idx+1, poly.length))
            // fff(poly.substr(idx+1, poly.length))
        }else if( i === ']'){
            // s = 0
            e = c
            if ((e - s) > 4){
                let tmpPoly = poly
                let tmp2 = tmpPoly.slice(s +1, e -1)
                let tmp3 = tmp2.split(',')
                tmp3.forEach(t => {
                    let tt = t.split(' ')
                    resPoArr.push([parseFloat(tt[0]) ,parseFloat(tt[1])])
                })


                // resPoArr.push(tmpPoly.slice(s +1, e -1))
                // console.log('res: ',s +1, e -1)//.substr(s+1, e -1))
            }

            // console.log('77poly poly.length',poly.slice(s +1, e -1))//.substr(s+1, e -1))
            // s = 0
            // e = 0
            startPoArr.push({end: c})
            endPoArr.push(c)

            newPoArr.push(newPo)
            newPo = ''
            // fff(poly.substr(idx+1, poly.length))
        }else {
            newP += i
            newPo += i

        }

        if( poly[idx] === ']'){

                if( poly[idx +1] === ','){
                    // console.log(' 4444dddd22', idx)
                }

            // console.log('poly[idx+1,poly.length',poly.substr(idx+1, poly.length))
            // fff(poly.substr(idx+1, poly.length))
        }
        c += 1
        idx += 1
    }


    // console.log('newPoArr', newPoArr)
    if(c > 1000) return 0

}

fff(newPol)

// console.log('startPoArr', startPoArr)
// console.log('resPoArr', resPoArr.slice(0,5))

// console.log('endPoArr', endPoArr)

// let dddd = newPol.substr(2, 3127)
// let dddd = newPol.substr(startPoArr[5], endPoArr[3])
// console.log('newPol startPoArr[5]', newPol[startPoArr[5] +1])
// console.log('newPol endPoArr[3]', newPol[endPoArr[3] -1])
// console.log('newPol last', newPol.slice(-5))
// console.log('dddd', dddd)


// const fff2 = (poly) => {
//
//     startPoArr.forEach(p => {
//         let newDD = poly
//     })
//
//
//
//     // console.log('newPoArr', newPoArr)
//
// }
//
// fff2(newPol)

// newPol = newPol.split('],[').length
// newPol = newPol.split('],[')
// console.log('newPol', newPol)
// console.log('newPol',JSON.parse(newPol))

let ar77 = [1,2,3,4]
let newAr = ar77.map(ar => ar === 4 ? ar = 5: ar = 7)
console.log(ar77, newAr)

let tx77 = '[1,2,3,4]'
let newTxt = JSON.parse(tx77)
// let newTxt = tx77.map(ar => ar === '4' ? ar = '5': ar = '7')

console.log(tx77, newTxt)

let dr = 'pp25.774747s'

// console.log(parseFloat(dr))

//////////

let arr = ["442", "452h", "424", "foo", "bar", "31", "35"];
arr = arr.filter(x => !isNaN(Number(x))); // ["442", "424", "31", "35"]

////////////
const arr211 = arr.map(x => Number(x)); // [442, 424, 31, 35]
const arr311 = arr.map(Number); // [442, 424, 31, 35] – the same result

////////

// let geoJson = WKT.parse('LINESTRING (30 10, 10 30, 40 40)')


// console.log('geoJson',geoJson.coordinates)

//var re = /яблоки/gi;
// var str = 'Яблоки круглые и яблоки сочные.';
// var newstr = str.replace(re, 'апельсины');

// function replacer(match, p1, p2, p3, offset, string) {
//     // p1 - не цифры, p2 - цифры, p3 - не буквы и не цифры
//     return [p1, p2, p3].join(' - ');
// }
// var newString = 'abc12345#$*%'.replace(/([^\d]*)(\d*)([^\w]*)/, replacer);


let polyStr = 'MULTIPOLYGON (((30 10, 20 35, 45 60),(70 17, 70 75, 85 80),(38 18, 28 38, 48 68)))\n'

function replacer(match, idx1, genText) {
    console.log('match',match)
    // let [x, y] = proj4(def_msk).inverse([parseFloat(arMp[0]), parseFloat(arMp[1])]);
    let newValue = '300 100'
    return newValue//.join(' - ');
}
// let searchV = '30 10'
// let newPoly = polyStr.replace(searchV, replacer)
// let newPoly = polyStr.replace('30 10', '300 100')
// console.log('newPoly',newPoly)

let geoJson = (poly) => WKT.parse(poly)


//multiPolGeo
const listGeo2 = (multPolGeo) => {

    let x = 0
    let strX = ''
    let strY = ''
    let keyX = true
    const brackets = [].map.call(multPolGeo, char => {
        switch (char) {
            case '(':
                strX = ''
                strY = ''
                keyX = true
                return char
            case ')':
                keyX = true
                if(strX === ''){
                    return ')'
                }
                let resXtmp1 = 0, resYtmp1 = 0
                try {
                    if(strX !== ''){
                        let [resX, resY] = proj4(def_msk).inverse([parseFloat(strX), parseFloat(strY)]);
                        resXtmp1 = resY
                        resYtmp1 = resX
                    }

                    // console.log('77 [x, y]',x, y )
                }catch (e){
                    console.log('ошибка парсинга координат')
                }
                strX = ''
                strY = ''

                return resXtmp1 ? `${resXtmp1} ${resYtmp1})` : ')'
            case ',':
                keyX = true
                if(strX === ''){
                    return ','
                }

                // let tmpX2 = strX
                // let tmpY2 = strY


                let resXtmp = 0, resYtmp = 0
                try {
                    if(strX !== ''){
                        let [resX, resY] = proj4(def_msk).inverse([parseFloat(strX), parseFloat(strY)]);
                        resXtmp = resY
                        resYtmp = resX
                    }

                    // console.log('77 [x, y]',x, y )
                }catch (e){
                    console.log('ошибка парсинга координат2',strX,strY)
                }
                // console.log(strX, strY)
                strX = ''
                strY = ''

                return  resXtmp ? `${resXtmp} ${resYtmp},` : ','
            case ' ':
                keyX = false
                return ''
            // let strX0 = str
            // str = ''
            // return strX0 ? `${strX0} `: ' '
            default:
                if ('-0123456789.'.includes(char)) {
                    // x += 1
                    if(keyX){
                        strX += char
                    }else {
                        strY += char
                    }


                }else {
                    // console.log('error', char)
                    return char
                }
                break
        }
    }).join('')
    console.log('brackets2',brackets)

}

const pointV = (coordinates) => {
    let coordinatesRes =  coordinates.map(coor => {
        // console.log('coor', coor)
        if(coor.length == 1){
            console.log(' coor.length == 1', coor.length)
        }
        let coorRes = coor.map((cor, idx) => {
            if(cor.length === 2 ){
                try {
                    let [x, y] = proj4(def_msk).inverse([parseFloat(cor[0]), parseFloat(cor[1])]);
                    // console.log('77 [x, y]',x, y )
                    return [y,x]
                }catch (e){
                    console.log('ошибка парсинга координат')
                }

            }else {
                console.log(' error - add procedure 22')
            }
        })
        return [coorRes]
    })
    return coordinatesRes

}

let convertWT = (polyStr) => {
    let val = geoJson(polyStr)
    if (val.coordinates){
        let coordinates = val.coordinates
        let coordLen = coordinates.length;
        console.log('11 coordinates length',coordLen)
        if(coordLen === 1){

            let coordinates1 = val.coordinates[0]

            if(coordinates1.length === 1){
                let coordinates2 = coordinates1[0]
                console.log('22 coordinates1 length',coordinates1.length)
                if(coordinates2.length === 1){
                    console.log(' error - add procedure')
                } else {
                    let res = pointV(coordinates2)
                    console.log('pointV(coordinates2)',coordinates2.length)
                    return res
                }

            }else {
                let resOrPont = pointV(coordinates1) // enter func
                console.log('res[0]',resOrPont[0])
                console.log('pointV(coordinates1)',coordinates1.length)
                return [resOrPont]
            }

        }else {
            let res = pointV(coordinates)

            console.log('pointV(coordinates)',coordLen)
            return [[res]]
        }

    }
    console.log('geoJson',val)
}

// let res = convertWT(polygon)
//
// console.log('res',res)

// const myMap = new Map();
// myMap.set(9750, 'podolsk');
// myMap.set(235, ['moscow','moscow','moscow']);
// for (let [key, value] of myMap) {
//     console.log(key + ': ' + value);
// }